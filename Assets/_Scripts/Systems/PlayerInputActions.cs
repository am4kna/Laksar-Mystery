//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Scripts/Systems/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Swim"",
            ""id"": ""98020e3a-6673-49ff-9564-7af5cb5250af"",
            ""actions"": [
                {
                    ""name"": ""SwimDirection"",
                    ""type"": ""Value"",
                    ""id"": ""468bd5f4-fba3-4f8b-8f03-c7a894652cf2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""9db7dcf4-919b-46d8-a474-2368ef8d94ed"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""05de97d8-19d3-4a32-a5a5-6d1c4d4cd986"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwimDirection"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b351f0dc-883a-4e7d-968b-724c050a9b1f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwimDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aa68feee-7476-4371-bc7c-abcc187597e9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwimDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2899d1d4-c49e-4648-a0d2-3007531b4ef4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""465fdbe1-cef8-4fa7-b528-49dc5f20afa6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6f525915-6d96-4cfc-a6cb-c8d7368261e8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Swim
        m_Swim = asset.FindActionMap("Swim", throwIfNotFound: true);
        m_Swim_SwimDirection = m_Swim.FindAction("SwimDirection", throwIfNotFound: true);
        m_Swim_Move = m_Swim.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Swim
    private readonly InputActionMap m_Swim;
    private List<ISwimActions> m_SwimActionsCallbackInterfaces = new List<ISwimActions>();
    private readonly InputAction m_Swim_SwimDirection;
    private readonly InputAction m_Swim_Move;
    public struct SwimActions
    {
        private @PlayerInputActions m_Wrapper;
        public SwimActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwimDirection => m_Wrapper.m_Swim_SwimDirection;
        public InputAction @Move => m_Wrapper.m_Swim_Move;
        public InputActionMap Get() { return m_Wrapper.m_Swim; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwimActions set) { return set.Get(); }
        public void AddCallbacks(ISwimActions instance)
        {
            if (instance == null || m_Wrapper.m_SwimActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwimActionsCallbackInterfaces.Add(instance);
            @SwimDirection.started += instance.OnSwimDirection;
            @SwimDirection.performed += instance.OnSwimDirection;
            @SwimDirection.canceled += instance.OnSwimDirection;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(ISwimActions instance)
        {
            @SwimDirection.started -= instance.OnSwimDirection;
            @SwimDirection.performed -= instance.OnSwimDirection;
            @SwimDirection.canceled -= instance.OnSwimDirection;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(ISwimActions instance)
        {
            if (m_Wrapper.m_SwimActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwimActions instance)
        {
            foreach (var item in m_Wrapper.m_SwimActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwimActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwimActions @Swim => new SwimActions(this);
    public interface ISwimActions
    {
        void OnSwimDirection(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
